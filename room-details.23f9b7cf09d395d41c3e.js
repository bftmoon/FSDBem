!function(t){function e(e){for(var r,o,u=e[0],l=e[1],c=e[2],d=0,f=[];d<u.length;d++)o=u[d],Object.prototype.hasOwnProperty.call(a,o)&&a[o]&&f.push(a[o][0]),a[o]=0;for(r in l)Object.prototype.hasOwnProperty.call(l,r)&&(t[r]=l[r]);for(s&&s(e);f.length;)f.shift()();return i.push.apply(i,c||[]),n()}function n(){for(var t,e=0;e<i.length;e++){for(var n=i[e],r=!0,u=1;u<n.length;u++){var l=n[u];0!==a[l]&&(r=!1)}r&&(i.splice(e--,1),t=o(o.s=n[0]))}return t}var r={},a={31:0},i=[];function o(e){if(r[e])return r[e].exports;var n=r[e]={i:e,l:!1,exports:{}};return t[e].call(n.exports,n,n.exports,o),n.l=!0,n.exports}o.m=t,o.c=r,o.d=function(t,e,n){o.o(t,e)||Object.defineProperty(t,e,{enumerable:!0,get:n})},o.r=function(t){"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(t,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(t,"__esModule",{value:!0})},o.t=function(t,e){if(1&e&&(t=o(t)),8&e)return t;if(4&e&&"object"==typeof t&&t&&t.__esModule)return t;var n=Object.create(null);if(o.r(n),Object.defineProperty(n,"default",{enumerable:!0,value:t}),2&e&&"string"!=typeof t)for(var r in t)o.d(n,r,function(e){return t[e]}.bind(null,r));return n},o.n=function(t){var e=t&&t.__esModule?function(){return t.default}:function(){return t};return o.d(e,"a",e),e},o.o=function(t,e){return Object.prototype.hasOwnProperty.call(t,e)},o.p="";var u=window.webpackJsonp=window.webpackJsonp||[],l=u.push.bind(u);u.push=e,u=u.slice();for(var c=0;c<u.length;c++)e(u[c]);var s=l;i.push(["/f/g",2,6,0,1,3,5,4,9,10,13,20,17]),n()}({"/f/g":function(t,e,n){"use strict";n.r(e);n("KG+G"),n("ECeb"),n("mbwX"),n("BQPm"),n("bn27");var r=n("SF9M").a,a=n("rMor"),i=n("jqRu");r.initDefault({data:[130,65,65,0]}),a.a.initAll({}),i.a.initDefault({})},"KG+G":function(t,e,n){},SF9M:function(t,e,n){"use strict";(function(t){var r=n("1frD");class a{init({$element:t,data:e,scale:n=1}){0!==t.length&&(this._$element=t,this._data=[e[0],e[2],e[1],e[3]],this._buildDonut(n),this._writeSummary())}_buildDonut(t){const e=this._$element.find(".js-feedbacks-chart__donut")[0],n=e.getContext("2d"),r=120*t,a=5*t,i=r/2,o=i-a;e.width=r,e.height=r,this._calculateRadianPoints(this._data).forEach(t=>{const e=n.createLinearGradient(0,0,0,r);e.addColorStop(0,t.gradient[0]),e.addColorStop(1,t.gradient[1]),n.beginPath(),n.arc(i,i,o,t.start,t.end,!1),n.lineWidth=a,n.strokeStyle=e,n.stroke()})}_calculateRadianPoints(){const t=[["#FFE39C","#FFBA9C"],["#BC9CFF","#8BA4F9"],["#6FCF97","#66D2EA"],["#919191","#3D4975"]];let e=Math.PI/2;const n=Math.PI/90,r=2*Math.PI-n*this._data.filter(t=>0!==t).length,a=this._data.reduce((t,e)=>t+e,0),i=[];for(let o=0;o<this._data.length;o+=1)if(0!==this._data[o]){const u=e+this._data[o]/a*r;i.push({start:e,end:u,gradient:t[o]}),e=u+n}return i}_writeSummary(){const[t,e]=this._$element.find(".js-feedbacks-chart__summary").children(),n=this._data.reduce((t,e)=>t+e,0);t.innerText=n,e.innerText=r.a.selectWordByCount(n,["голосов","голос","голоса","голосов"],{})}static initDefault({selector:e=".js-feedbacks-chart",parent:n=document,data:r=[0,0,0,0]}){(new a).init({$element:t(n.querySelector(e)),data:r})}}e.a=a}).call(this,n("EVdn"))},bn27:function(t,e,n){}});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vd2VicGFjay9ib290c3RyYXAiLCJ3ZWJwYWNrOi8vLy4vc3JjL2tpdC9ibG9ja3MvZmVlZGJhY2tzLWNoYXJ0L2luZGV4LmpzIiwid2VicGFjazovLy8uL3NyYy9wYWdlcy9zaXRlL3Jvb20tZGV0YWlscy9yb29tLWRldGFpbHMuanMiLCJ3ZWJwYWNrOi8vLy4vc3JjL2tpdC9ibG9ja3MvZmVlZGJhY2tzLWNoYXJ0L0ZlZWRiYWNrc0NoYXJ0LmpzIl0sIm5hbWVzIjpbIndlYnBhY2tKc29ucENhbGxiYWNrIiwiZGF0YSIsIm1vZHVsZUlkIiwiY2h1bmtJZCIsImNodW5rSWRzIiwibW9yZU1vZHVsZXMiLCJleGVjdXRlTW9kdWxlcyIsImkiLCJyZXNvbHZlcyIsImxlbmd0aCIsIk9iamVjdCIsInByb3RvdHlwZSIsImhhc093blByb3BlcnR5IiwiY2FsbCIsImluc3RhbGxlZENodW5rcyIsInB1c2giLCJtb2R1bGVzIiwicGFyZW50SnNvbnBGdW5jdGlvbiIsInNoaWZ0IiwiZGVmZXJyZWRNb2R1bGVzIiwiYXBwbHkiLCJjaGVja0RlZmVycmVkTW9kdWxlcyIsInJlc3VsdCIsImRlZmVycmVkTW9kdWxlIiwiZnVsZmlsbGVkIiwiaiIsImRlcElkIiwic3BsaWNlIiwiX193ZWJwYWNrX3JlcXVpcmVfXyIsInMiLCJpbnN0YWxsZWRNb2R1bGVzIiwiMzEiLCJleHBvcnRzIiwibW9kdWxlIiwibCIsIm0iLCJjIiwiZCIsIm5hbWUiLCJnZXR0ZXIiLCJvIiwiZGVmaW5lUHJvcGVydHkiLCJlbnVtZXJhYmxlIiwiZ2V0IiwiciIsIlN5bWJvbCIsInRvU3RyaW5nVGFnIiwidmFsdWUiLCJ0IiwibW9kZSIsIl9fZXNNb2R1bGUiLCJucyIsImNyZWF0ZSIsImtleSIsImJpbmQiLCJuIiwib2JqZWN0IiwicHJvcGVydHkiLCJwIiwianNvbnBBcnJheSIsIndpbmRvdyIsIm9sZEpzb25wRnVuY3Rpb24iLCJzbGljZSIsImluaXREZWZhdWx0IiwiaW5pdEFsbCIsIkZlZWRiYWNrc0NoYXJ0IiwiJGVsZW1lbnQiLCJzY2FsZSIsInRoaXMiLCJfJGVsZW1lbnQiLCJfZGF0YSIsIl9idWlsZERvbnV0IiwiX3dyaXRlU3VtbWFyeSIsImNhbnZhcyIsImZpbmQiLCJjb250ZXh0IiwiZ2V0Q29udGV4dCIsInNpemUiLCJsaW5lV2lkdGgiLCJjZW50ZXIiLCJyYWRpdXMiLCJ3aWR0aCIsImhlaWdodCIsIl9jYWxjdWxhdGVSYWRpYW5Qb2ludHMiLCJmb3JFYWNoIiwiaXRlbSIsImdyYWRpZW50IiwiY3JlYXRlTGluZWFyR3JhZGllbnQiLCJhZGRDb2xvclN0b3AiLCJiZWdpblBhdGgiLCJhcmMiLCJzdGFydCIsImVuZCIsInN0cm9rZVN0eWxlIiwic3Ryb2tlIiwiZ3JhZGllbnRzIiwic3RhcnRQb2ludCIsIk1hdGgiLCJQSSIsImdhcFdpZHRoIiwiZnJlZVNwYWNlIiwiZmlsdGVyIiwic3VtIiwicmVkdWNlIiwiYSIsImIiLCJwb2ludHMiLCJlbmRQb2ludCIsImNvdW50Iiwidm9pY2UiLCJjaGlsZHJlbiIsInZvaWNlU3VtIiwiaW5uZXJUZXh0Iiwic2VsZWN0V29yZEJ5Q291bnQiLCJzZWxlY3RvciIsInBhcmVudCIsImRvY3VtZW50IiwiaW5pdCIsIiQiLCJxdWVyeVNlbGVjdG9yIl0sIm1hcHBpbmdzIjoiYUFDRSxTQUFTQSxFQUFxQkMsR0FRN0IsSUFQQSxJQU1JQyxFQUFVQyxFQU5WQyxFQUFXSCxFQUFLLEdBQ2hCSSxFQUFjSixFQUFLLEdBQ25CSyxFQUFpQkwsRUFBSyxHQUlITSxFQUFJLEVBQUdDLEVBQVcsR0FDcENELEVBQUlILEVBQVNLLE9BQVFGLElBQ3pCSixFQUFVQyxFQUFTRyxHQUNoQkcsT0FBT0MsVUFBVUMsZUFBZUMsS0FBS0MsRUFBaUJYLElBQVlXLEVBQWdCWCxJQUNwRkssRUFBU08sS0FBS0QsRUFBZ0JYLEdBQVMsSUFFeENXLEVBQWdCWCxHQUFXLEVBRTVCLElBQUlELEtBQVlHLEVBQ1pLLE9BQU9DLFVBQVVDLGVBQWVDLEtBQUtS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N0QsUSIsImZpbGUiOiJyb29tLWRldGFpbHMuMjNmOWI3Y2YwOWQzOTVkNDFjM2UuanMiLCJzb3VyY2VzQ29udGVudCI6WyIgXHQvLyBpbnN0YWxsIGEgSlNPTlAgY2FsbGJhY2sgZm9yIGNodW5rIGxvYWRpbmdcbiBcdGZ1bmN0aW9uIHdlYnBhY2tKc29ucENhbGxiYWNrKGRhdGEpIHtcbiBcdFx0dmFyIGNodW5rSWRzID0gZGF0YVswXTtcbiBcdFx0dmFyIG1vcmVNb2R1bGVzID0gZGF0YVsxXTtcbiBcdFx0dmFyIGV4ZWN1dGVNb2R1bGVzID0gZGF0YVsyXTtcblxuIFx0XHQvLyBhZGQgXCJtb3JlTW9kdWxlc1wiIHRvIHRoZSBtb2R1bGVzIG9iamVjdCxcbiBcdFx0Ly8gdGhlbiBmbGFnIGFsbCBcImNodW5rSWRzXCIgYXMgbG9hZGVkIGFuZCBmaXJlIGNhbGxiYWNrXG4gXHRcdHZhciBtb2R1bGVJZCwgY2h1bmtJZCwgaSA9IDAsIHJlc29sdmVzID0gW107XG4gXHRcdGZvcig7aSA8IGNodW5rSWRzLmxlbmd0aDsgaSsrKSB7XG4gXHRcdFx0Y2h1bmtJZCA9IGNodW5rSWRzW2ldO1xuIFx0XHRcdGlmKE9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbChpbnN0YWxsZWRDaHVua3MsIGNodW5rSWQpICYmIGluc3RhbGxlZENodW5rc1tjaHVua0lkXSkge1xuIFx0XHRcdFx0cmVzb2x2ZXMucHVzaChpbnN0YWxsZWRDaHVua3NbY2h1bmtJZF1bMF0pO1xuIFx0XHRcdH1cbiBcdFx0XHRpbnN0YWxsZWRDaHVua3NbY2h1bmtJZF0gPSAwO1xuIFx0XHR9XG4gXHRcdGZvcihtb2R1bGVJZCBpbiBtb3JlTW9kdWxlcykge1xuIFx0XHRcdGlmKE9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbChtb3JlTW9kdWxlcywgbW9kdWxlSWQpKSB7XG4gXHRcdFx0XHRtb2R1bGVzW21vZHVsZUlkXSA9IG1vcmVNb2R1bGVzW21vZHVsZUlkXTtcbiBcdFx0XHR9XG4gXHRcdH1cbiBcdFx0aWYocGFyZW50SnNvbnBGdW5jdGlvbikgcGFyZW50SnNvbnBGdW5jdGlvbihkYXRhKTtcblxuIFx0XHR3aGlsZShyZXNvbHZlcy5sZW5ndGgpIHtcbiBcdFx0XHRyZXNvbHZlcy5zaGlmdCgpKCk7XG4gXHRcdH1cblxuIFx0XHQvLyBhZGQgZW50cnkgbW9kdWxlcyBmcm9tIGxvYWRlZCBjaHVuayB0byBkZWZlcnJlZCBsaXN0XG4gXHRcdGRlZmVycmVkTW9kdWxlcy5wdXNoLmFwcGx5KGRlZmVycmVkTW9kdWxlcywgZXhlY3V0ZU1vZHVsZXMgfHwgW10pO1xuXG4gXHRcdC8vIHJ1biBkZWZlcnJlZCBtb2R1bGVzIHdoZW4gYWxsIGNodW5rcyByZWFkeVxuIFx0XHRyZXR1cm4gY2hlY2tEZWZlcnJlZE1vZHVsZXMoKTtcbiBcdH07XG4gXHRmdW5jdGlvbiBjaGVja0RlZmVycmVkTW9kdWxlcygpIHtcbiBcdFx0dmFyIHJlc3VsdDtcbiBcdFx0Zm9yKHZhciBpID0gMDsgaSA8IGRlZmVycmVkTW9kdWxlcy5sZW5ndGg7IGkrKykge1xuIFx0XHRcdHZhciBkZWZlcnJlZE1vZHVsZSA9IGRlZmVycmVkTW9kdWxlc1tpXTtcbiBcdFx0XHR2YXIgZnVsZmlsbGVkID0gdHJ1ZTtcbiBcdFx0XHRmb3IodmFyIGogPSAxOyBqIDwgZGVmZXJyZWRNb2R1bGUubGVuZ3RoOyBqKyspIHtcbiBcdFx0XHRcdHZhciBkZXBJZCA9IGRlZmVycmVkTW9kdWxlW2pdO1xuIFx0XHRcdFx0aWYoaW5zdGFsbGVkQ2h1bmtzW2RlcElkXSAhPT0gMCkgZnVsZmlsbGVkID0gZmFsc2U7XG4gXHRcdFx0fVxuIFx0XHRcdGlmKGZ1bGZpbGxlZCkge1xuIFx0XHRcdFx0ZGVmZXJyZWRNb2R1bGVzLnNwbGljZShpLS0sIDEpO1xuIFx0XHRcdFx0cmVzdWx0ID0gX193ZWJwYWNrX3JlcXVpcmVfXyhfX3dlYnBhY2tfcmVxdWlyZV9fLnMgPSBkZWZlcnJlZE1vZHVsZVswXSk7XG4gXHRcdFx0fVxuIFx0XHR9XG5cbiBcdFx0cmV0dXJuIHJlc3VsdDtcbiBcdH1cblxuIFx0Ly8gVGhlIG1vZHVsZSBjYWNoZVxuIFx0dmFyIGluc3RhbGxlZE1vZHVsZXMgPSB7fTtcblxuIFx0Ly8gb2JqZWN0IHRvIHN0b3JlIGxvYWRlZCBhbmQgbG9hZGluZyBjaHVua3NcbiBcdC8vIHVuZGVmaW5lZCA9IGNodW5rIG5vdCBsb2FkZWQsIG51bGwgPSBjaHVuayBwcmVsb2FkZWQvcHJlZmV0Y2hlZFxuIFx0Ly8gUHJvbWlzZSA9IGNodW5rIGxvYWRpbmcsIDAgPSBjaHVuayBsb2FkZWRcbiBcdHZhciBpbnN0YWxsZWRDaHVua3MgPSB7XG4gXHRcdDMxOiAwXG4gXHR9O1xuXG4gXHR2YXIgZGVmZXJyZWRNb2R1bGVzID0gW107XG5cbiBcdC8vIFRoZSByZXF1aXJlIGZ1bmN0aW9uXG4gXHRmdW5jdGlvbiBfX3dlYnBhY2tfcmVxdWlyZV9fKG1vZHVsZUlkKSB7XG5cbiBcdFx0Ly8gQ2hlY2sgaWYgbW9kdWxlIGlzIGluIGNhY2hlXG4gXHRcdGlmKGluc3RhbGxlZE1vZHVsZXNbbW9kdWxlSWRdKSB7XG4gXHRcdFx0cmV0dXJuIGluc3RhbGxlZE1vZHVsZXNbbW9kdWxlSWRdLmV4cG9ydHM7XG4gXHRcdH1cbiBcdFx0Ly8gQ3JlYXRlIGEgbmV3IG1vZHVsZSAoYW5kIHB1dCBpdCBpbnRvIHRoZSBjYWNoZSlcbiBcdFx0dmFyIG1vZHVsZSA9IGluc3RhbGxlZE1vZHVsZXNbbW9kdWxlSWRdID0ge1xuIFx0XHRcdGk6IG1vZHVsZUlkLFxuIFx0XHRcdGw6IGZhbHNlLFxuIFx0XHRcdGV4cG9ydHM6IHt9XG4gXHRcdH07XG5cbiBcdFx0Ly8gRXhlY3V0ZSB0aGUgbW9kdWxlIGZ1bmN0aW9uXG4gXHRcdG1vZHVsZXNbbW9kdWxlSWRdLmNhbGwobW9kdWxlLmV4cG9ydHMsIG1vZHVsZSwgbW9kdWxlLmV4cG9ydHMsIF9fd2VicGFja19yZXF1aXJlX18pO1xuXG4gXHRcdC8vIEZsYWcgdGhlIG1vZHVsZSBhcyBsb2FkZWRcbiBcdFx0bW9kdWxlLmwgPSB0cnVlO1xuXG4gXHRcdC8vIFJldHVybiB0aGUgZXhwb3J0cyBvZiB0aGUgbW9kdWxlXG4gXHRcdHJldHVybiBtb2R1bGUuZXhwb3J0cztcbiBcdH1cblxuXG4gXHQvLyBleHBvc2UgdGhlIG1vZHVsZXMgb2JqZWN0IChfX3dlYnBhY2tfbW9kdWxlc19fKVxuIFx0X193ZWJwYWNrX3JlcXVpcmVfXy5tID0gbW9kdWxlcztcblxuIFx0Ly8gZXhwb3NlIHRoZSBtb2R1bGUgY2FjaGVcbiBcdF9fd2VicGFja19yZXF1aXJlX18uYyA9IGluc3RhbGxlZE1vZHVsZXM7XG5cbiBcdC8vIGRlZmluZSBnZXR0ZXIgZnVuY3Rpb24gZm9yIGhhcm1vbnkgZXhwb3J0c1xuIFx0X193ZWJwYWNrX3JlcXVpcmVfXy5kID0gZnVuY3Rpb24oZXhwb3J0cywgbmFtZSwgZ2V0dGVyKSB7XG4gXHRcdGlmKCFfX3dlYnBhY2tfcmVxdWlyZV9fLm8oZXhwb3J0cywgbmFtZSkpIHtcbiBcdFx0XHRPYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgbmFtZSwgeyBlbnVtZXJhYmxlOiB0cnVlLCBnZXQ6IGdldHRlciB9KTtcbiBcdFx0fVxuIFx0fTtcblxuIFx0Ly8gZGVmaW5lIF9fZXNNb2R1bGUgb24gZXhwb3J0c1xuIFx0X193ZWJwYWNrX3JlcXVpcmVfXy5yID0gZnVuY3Rpb24oZXhwb3J0cykge1xuIFx0XHRpZih0eXBlb2YgU3ltYm9sICE9PSAndW5kZWZpbmVkJyAmJiBTeW1ib2wudG9TdHJpbmdUYWcpIHtcbiBcdFx0XHRPYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgU3ltYm9sLnRvU3RyaW5nVGFnLCB7IHZhbHVlOiAnTW9kdWxlJyB9KTtcbiBcdFx0fVxuIFx0XHRPYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgJ19fZXNNb2R1bGUnLCB7IHZhbHVlOiB0cnVlIH0pO1xuIFx0fTtcblxuIFx0Ly8gY3JlYXRlIGEgZmFrZSBuYW1lc3BhY2Ugb2JqZWN0XG4gXHQvLyBtb2RlICYgMTogdmFsdWUgaXMgYSBtb2R1bGUgaWQsIHJlcXVpcmUgaXRcbiBcdC8vIG1vZGUgJiAyOiBtZXJnZSBhbGwgcHJvcGVydGllcyBvZiB2YWx1ZSBpbnRvIHRoZSBuc1xuIFx0Ly8gbW9kZSAmIDQ6IHJldHVybiB2YWx1ZSB3aGVuIGFscmVhZHkgbnMgb2JqZWN0XG4gXHQvLyBtb2RlICYgOHwxOiBiZWhhdmUgbGlrZSByZXF1aXJlXG4gXHRfX3dlYnBhY2tfcmVxdWlyZV9fLnQgPSBmdW5jdGlvbih2YWx1ZSwgbW9kZSkge1xuIFx0XHRpZihtb2RlICYgMSkgdmFsdWUgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKHZhbHVlKTtcbiBcdFx0aWYobW9kZSAmIDgpIHJldHVybiB2YWx1ZTtcbiBcdFx0aWYoKG1vZGUgJiA0KSAmJiB0eXBlb2YgdmFsdWUgPT09ICdvYmplY3QnICYmIHZhbHVlICYmIHZhbHVlLl9fZXNNb2R1bGUpIHJldHVybiB2YWx1ZTtcbiBcdFx0dmFyIG5zID0gT2JqZWN0LmNyZWF0ZShudWxsKTtcbiBcdFx0X193ZWJwYWNrX3JlcXVpcmVfXy5yKG5zKTtcbiBcdFx0T2JqZWN0LmRlZmluZVByb3BlcnR5KG5zLCAnZGVmYXVsdCcsIHsgZW51bWVyYWJsZTogdHJ1ZSwgdmFsdWU6IHZhbHVlIH0pO1xuIFx0XHRpZihtb2RlICYgMiAmJiB0eXBlb2YgdmFsdWUgIT0gJ3N0cmluZycpIGZvcih2YXIga2V5IGluIHZhbHVlKSBfX3dlYnBhY2tfcmVxdWlyZV9fLmQobnMsIGtleSwgZnVuY3Rpb24oa2V5KSB7IHJldHVybiB2YWx1ZVtrZXldOyB9LmJpbmQobnVsbCwga2V5KSk7XG4gXHRcdHJldHVybiBucztcbiBcdH07XG5cbiBcdC8vIGdldERlZmF1bHRFeHBvcnQgZnVuY3Rpb24gZm9yIGNvbXBhdGliaWxpdHkgd2l0aCBub24taGFybW9ueSBtb2R1bGVzXG4gXHRfX3dlYnBhY2tfcmVxdWlyZV9fLm4gPSBmdW5jdGlvbihtb2R1bGUpIHtcbiBcdFx0dmFyIGdldHRlciA9IG1vZHVsZSAmJiBtb2R1bGUuX19lc01vZHVsZSA/XG4gXHRcdFx0ZnVuY3Rpb24gZ2V0RGVmYXVsdCgpIHsgcmV0dXJuIG1vZHVsZVsnZGVmYXVsdCddOyB9IDpcbiBcdFx0XHRmdW5jdGlvbiBnZXRNb2R1bGVFeHBvcnRzKCkgeyByZXR1cm4gbW9kdWxlOyB9O1xuIFx0XHRfX3dlYnBhY2tfcmVxdWlyZV9fLmQoZ2V0dGVyLCAnYScsIGdldHRlcik7XG4gXHRcdHJldHVybiBnZXR0ZXI7XG4gXHR9O1xuXG4gXHQvLyBPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGxcbiBcdF9fd2VicGFja19yZXF1aXJlX18ubyA9IGZ1bmN0aW9uKG9iamVjdCwgcHJvcGVydHkpIHsgcmV0dXJuIE9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbChvYmplY3QsIHByb3BlcnR5KTsgfTtcblxuIFx0Ly8gX193ZWJwYWNrX3B1YmxpY19wYXRoX19cbiBcdF9fd2VicGFja19yZXF1aXJlX18ucCA9IFwiXCI7XG5cbiBcdHZhciBqc29ucEFycmF5ID0gd2luZG93W1wid2VicGFja0pzb25wXCJdID0gd2luZG93W1wid2VicGFja0pzb25wXCJdIHx8IFtdO1xuIFx0dmFyIG9sZEpzb25wRnVuY3Rpb24gPSBqc29ucEFycmF5LnB1c2guYmluZChqc29ucEFycmF5KTtcbiBcdGpzb25wQXJyYXkucHVzaCA9IHdlYnBhY2tKc29ucENhbGxiYWNrO1xuIFx0anNvbnBBcnJheSA9IGpzb25wQXJyYXkuc2xpY2UoKTtcbiBcdGZvcih2YXIgaSA9IDA7IGkgPCBqc29ucEFycmF5Lmxlbmd0aDsgaSsrKSB3ZWJwYWNrSnNvbnBDYWxsYmFjayhqc29ucEFycmF5W2ldKTtcbiBcdHZhciBwYXJlbnRKc29ucEZ1bmN0aW9uID0gb2xkSnNvbnBGdW5jdGlvbjtcblxuXG4gXHQvLyBhZGQgZW50cnkgbW9kdWxlIHRvIGRlZmVycmVkIGxpc3RcbiBcdGRlZmVycmVkTW9kdWxlcy5wdXNoKFtcIi9mL2dcIiwyLDYsMCwxLDMsNSw0LDksMTAsMTMsMjAsMTddKTtcbiBcdC8vIHJ1biBkZWZlcnJlZCBtb2R1bGVzIHdoZW4gcmVhZHlcbiBcdHJldHVybiBjaGVja0RlZmVycmVkTW9kdWxlcygpO1xuIiwiaW1wb3J0ICcuL2ZlZWRiYWNrcy1jaGFydC5zY3NzJ1xuaW1wb3J0IEZlZWRiYWNrc0NoYXJ0IGZyb20gXCIuL0ZlZWRiYWNrc0NoYXJ0XCI7XG5cbmV4cG9ydCBkZWZhdWx0IEZlZWRiYWNrc0NoYXJ0O1xuIiwiaW1wb3J0ICcuL3Jvb20tZGV0YWlscy5zY3NzJ1xuaW1wb3J0ICcuLi9sYXlvdXQvbGF5b3V0J1xuaW1wb3J0ICdAYmxvY2tzL2ljb25lZC1saXN0J1xuaW1wb3J0ICdAYmxvY2tzL2J1bGxldC1saXN0J1xuaW1wb3J0IEZlZWRiYWNrc0NoYXJ0IGZyb20gXCJAYmxvY2tzL2ZlZWRiYWNrcy1jaGFydFwiO1xuaW1wb3J0IEZlZWRiYWNrIGZyb20gXCJAYmxvY2tzL2ZlZWRiYWNrXCI7XG5pbXBvcnQgQ2FsY3VsYXRvckNhcmQgZnJvbSBcIi4uLy4uLy4uL2tpdC9ibG9ja3MvY2FsY3VsYXRvci1jYXJkXCI7XG5cbkZlZWRiYWNrc0NoYXJ0LmluaXREZWZhdWx0KHtkYXRhOiBbMTMwLCA2NSwgNjUsIDBdfSk7XG5GZWVkYmFjay5pbml0QWxsKHt9KTtcbkNhbGN1bGF0b3JDYXJkLmluaXREZWZhdWx0KHt9KTtcbiIsImltcG9ydCBSdXNzaWFuTGFuZ1V0aWwgZnJvbSBcIkB1dGlscy9SdXNzaWFuTGFuZ1V0aWxcIjtcblxuY2xhc3MgRmVlZGJhY2tzQ2hhcnQge1xuICBpbml0KHskZWxlbWVudCwgZGF0YSwgc2NhbGUgPSAxfSkge1xuICAgIGlmICgkZWxlbWVudC5sZW5ndGggIT09IDApIHtcbiAgICAgIHRoaXMuXyRlbGVtZW50ID0gJGVsZW1lbnQ7XG4gICAgICB0aGlzLl9kYXRhID0gW2RhdGFbMF0sIGRhdGFbMl0sIGRhdGFbMV0sIGRhdGFbM11dO1xuICAgICAgdGhpcy5fYnVpbGREb251dChzY2FsZSk7XG4gICAgICB0aGlzLl93cml0ZVN1bW1hcnkoKTtcbiAgICB9XG4gIH1cblxuICBfYnVpbGREb251dChzY2FsZSkge1xuICAgIGNvbnN0IGNhbnZhcyA9IHRoaXMuXyRlbGVtZW50LmZpbmQoJy5qcy1mZWVkYmFja3MtY2hhcnRfX2RvbnV0JylbMF07XG4gICAgY29uc3QgY29udGV4dCA9IGNhbnZhcy5nZXRDb250ZXh0KCcyZCcpO1xuXG4gICAgY29uc3Qgc2l6ZSA9IDEyMCAqIHNjYWxlO1xuICAgIGNvbnN0IGxpbmVXaWR0aCA9IDUgKiBzY2FsZTtcbiAgICBjb25zdCBjZW50ZXIgPSBzaXplIC8gMjtcbiAgICBjb25zdCByYWRpdXMgPSBjZW50ZXIgLSBsaW5lV2lkdGg7XG5cbiAgICBjYW52YXMud2lkdGggPSBzaXplO1xuICAgIGNhbnZhcy5oZWlnaHQgPSBzaXplO1xuXG4gICAgdGhpcy5fY2FsY3VsYXRlUmFkaWFuUG9pbnRzKHRoaXMuX2RhdGEpLmZvckVhY2goKGl0ZW0pID0+IHtcbiAgICAgIGNvbnN0IGdyYWRpZW50ID0gY29udGV4dC5jcmVhdGVMaW5lYXJHcmFkaWVudCgwLCAwLCAwLCBzaXplKTtcbiAgICAgIGdyYWRpZW50LmFkZENvbG9yU3RvcCgwLCBpdGVtLmdyYWRpZW50WzBdKTtcbiAgICAgIGdyYWRpZW50LmFkZENvbG9yU3RvcCgxLCBpdGVtLmdyYWRpZW50WzFdKTtcblxuICAgICAgY29udGV4dC5iZWdpblBhdGgoKTtcbiAgICAgIGNvbnRleHQuYXJjKGNlbnRlciwgY2VudGVyLCByYWRpdXMsIGl0ZW0uc3RhcnQsIGl0ZW0uZW5kLCBmYWxzZSk7XG4gICAgICBjb250ZXh0LmxpbmVXaWR0aCA9IGxpbmVXaWR0aDtcblxuICAgICAgY29udGV4dC5zdHJva2VTdHlsZSA9IGdyYWRpZW50O1xuICAgICAgY29udGV4dC5zdHJva2UoKTtcbiAgICB9KTtcbiAgfVxuXG4gIF9jYWxjdWxhdGVSYWRpYW5Qb2ludHMoKSB7XG4gICAgY29uc3QgZ3JhZGllbnRzID0gW1xuICAgICAgWycjRkZFMzlDJywgJyNGRkJBOUMnXSxcbiAgICAgIFsnI0JDOUNGRicsICcjOEJBNEY5J10sXG4gICAgICBbJyM2RkNGOTcnLCAnIzY2RDJFQSddLFxuICAgICAgWycjOTE5MTkxJywgJyMzRDQ5NzUnXSxcbiAgICBdO1xuICAgIGxldCBzdGFydFBvaW50ID0gTWF0aC5QSSAvIDI7XG4gICAgY29uc3QgZ2FwV2lkdGggPSBNYXRoLlBJIC8gOTA7XG4gICAgY29uc3QgZnJlZVNwYWNlID0gMiAqIE1hdGguUEkgLSBnYXBXaWR0aCAqIHRoaXMuX2RhdGEuZmlsdGVyKChzaXplKSA9PiBzaXplICE9PSAwKS5sZW5ndGg7XG4gICAgY29uc3Qgc3VtID0gdGhpcy5fZGF0YS5yZWR1Y2UoKGEsIGIpID0+IGEgKyBiLCAwKTtcbiAgICBjb25zdCBwb2ludHMgPSBbXTtcblxuICAgIGZvciAobGV0IGkgPSAwOyBpIDwgdGhpcy5fZGF0YS5sZW5ndGg7IGkgKz0gMSkge1xuICAgICAgaWYgKHRoaXMuX2RhdGFbaV0gIT09IDApIHtcbiAgICAgICAgY29uc3QgZW5kUG9pbnQgPSBzdGFydFBvaW50ICsgKHRoaXMuX2RhdGFbaV0gLyBzdW0pICogZnJlZVNwYWNlO1xuICAgICAgICBwb2ludHMucHVzaCh7XG4gICAgICAgICAgc3RhcnQ6IHN0YXJ0UG9pbnQsXG4gICAgICAgICAgZW5kOiBlbmRQb2ludCxcbiAgICAgICAgICBncmFkaWVudDogZ3JhZGllbnRzW2ldLFxuICAgICAgICB9KTtcbiAgICAgICAgc3RhcnRQb2ludCA9IGVuZFBvaW50ICsgZ2FwV2lkdGg7XG4gICAgICB9XG4gICAgfVxuICAgIHJldHVybiBwb2ludHM7XG4gIH1cblxuICBfd3JpdGVTdW1tYXJ5KCkge1xuICAgIGNvbnN0IFtjb3VudCwgdm9pY2VdID0gdGhpcy5fJGVsZW1lbnQuZmluZCgnLmpzLWZlZWRiYWNrcy1jaGFydF9fc3VtbWFyeScpLmNoaWxkcmVuKCk7XG4gICAgY29uc3Qgdm9pY2VTdW0gPSB0aGlzLl9kYXRhLnJlZHVjZSgoYSwgYikgPT4gYSArIGIsIDApO1xuICAgIGNvdW50LmlubmVyVGV4dCA9IHZvaWNlU3VtO1xuICAgIHZvaWNlLmlubmVyVGV4dCA9IFJ1c3NpYW5MYW5nVXRpbC5zZWxlY3RXb3JkQnlDb3VudChcbiAgICAgIHZvaWNlU3VtLFxuICAgICAgWyfQs9C+0LvQvtGB0L7QsicsICfQs9C+0LvQvtGBJywgJ9Cz0L7Qu9C+0YHQsCcsICfQs9C+0LvQvtGB0L7QsiddLFxuICAgICAge30sXG4gICAgKTtcbiAgfVxuXG4gIHN0YXRpYyBpbml0RGVmYXVsdCh7c2VsZWN0b3IgPSAnLmpzLWZlZWRiYWNrcy1jaGFydCcsIHBhcmVudCA9IGRvY3VtZW50LCBkYXRhID0gWzAsIDAsIDAsIDBdfSkge1xuICAgIG5ldyBGZWVkYmFja3NDaGFydCgpLmluaXQoeyRlbGVtZW50OiAkKHBhcmVudC5xdWVyeVNlbGVjdG9yKHNlbGVjdG9yKSksIGRhdGF9KTtcbiAgfVxufVxuXG5leHBvcnQgZGVmYXVsdCBGZWVkYmFja3NDaGFydDtcbiJdLCJzb3VyY2VSb290IjoiIn0=