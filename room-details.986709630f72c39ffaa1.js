!function(t){function e(e){for(var r,i,u=e[0],c=e[1],s=e[2],d=0,f=[];d<u.length;d++)i=u[d],Object.prototype.hasOwnProperty.call(a,i)&&a[i]&&f.push(a[i][0]),a[i]=0;for(r in c)Object.prototype.hasOwnProperty.call(c,r)&&(t[r]=c[r]);for(l&&l(e);f.length;)f.shift()();return o.push.apply(o,s||[]),n()}function n(){for(var t,e=0;e<o.length;e++){for(var n=o[e],r=!0,u=1;u<n.length;u++){var c=n[u];0!==a[c]&&(r=!1)}r&&(o.splice(e--,1),t=i(i.s=n[0]))}return t}var r={},a={30:0},o=[];function i(e){if(r[e])return r[e].exports;var n=r[e]={i:e,l:!1,exports:{}};return t[e].call(n.exports,n,n.exports,i),n.l=!0,n.exports}i.e=function(t){var e=[],n=a[t];if(0!==n)if(n)e.push(n[2]);else{var r=new Promise((function(e,r){n=a[t]=[e,r]}));e.push(n[2]=r);var o,u=document.createElement("script");u.charset="utf-8",u.timeout=120,i.nc&&u.setAttribute("nonce",i.nc),u.src=function(t){return i.p+""+({27:"npm.air-datepicker"}[t]||t)+"."+{27:"d97d6f54e827362f52cd"}[t]+".js"}(t);var c=new Error;o=function(e){u.onerror=u.onload=null,clearTimeout(s);var n=a[t];if(0!==n){if(n){var r=e&&("load"===e.type?"missing":e.type),o=e&&e.target&&e.target.src;c.message="Loading chunk "+t+" failed.\n("+r+": "+o+")",c.name="ChunkLoadError",c.type=r,c.request=o,n[1](c)}a[t]=void 0}};var s=setTimeout((function(){o({type:"timeout",target:u})}),12e4);u.onerror=u.onload=o,document.head.appendChild(u)}return Promise.all(e)},i.m=t,i.c=r,i.d=function(t,e,n){i.o(t,e)||Object.defineProperty(t,e,{enumerable:!0,get:n})},i.r=function(t){"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(t,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(t,"__esModule",{value:!0})},i.t=function(t,e){if(1&e&&(t=i(t)),8&e)return t;if(4&e&&"object"==typeof t&&t&&t.__esModule)return t;var n=Object.create(null);if(i.r(n),Object.defineProperty(n,"default",{enumerable:!0,value:t}),2&e&&"string"!=typeof t)for(var r in t)i.d(n,r,function(e){return t[e]}.bind(null,r));return n},i.n=function(t){var e=t&&t.__esModule?function(){return t.default}:function(){return t};return i.d(e,"a",e),e},i.o=function(t,e){return Object.prototype.hasOwnProperty.call(t,e)},i.p="",i.oe=function(t){throw console.error(t),t};var u=window.webpackJsonp=window.webpackJsonp||[],c=u.push.bind(u);u.push=e,u=u.slice();for(var s=0;s<u.length;s++)e(u[s]);var l=c;o.push(["/f/g",2,0,1,3,5,4,8,12,18,16]),n()}({"/f/g":function(t,e,n){"use strict";n.r(e);n("BQPm"),n("mbwX");var r=n("jqRu"),a=(n("bn27"),n("SF9M").a),o=n("rMor");n("ECeb"),n("KG+G");a.initDefault({data:[130,65,65,0]}),o.a.initAll({}),r.a.initDefault({})},"KG+G":function(t,e,n){},SF9M:function(t,e,n){"use strict";(function(t){var r=n("1frD");class a{init({$element:t,data:e,scale:n=1}){0!==t.length&&(this._$element=t,this._data=[e[0],e[2],e[1],e[3]],this._buildDonut(n),this._writeSummary())}_buildDonut(t){const e=this._$element.find(".js-feedbacks-chart__donut")[0],n=e.getContext("2d"),r=120*t,a=5*t,o=r/2,i=o-a;e.width=r,e.height=r,this._calculateRadianPoints(this._data).forEach(t=>{const e=n.createLinearGradient(0,0,0,r);e.addColorStop(0,t.gradient[0]),e.addColorStop(1,t.gradient[1]),n.beginPath(),n.arc(o,o,i,t.start,t.end,!1),n.lineWidth=a,n.strokeStyle=e,n.stroke()})}_calculateRadianPoints(){const t=[["#FFE39C","#FFBA9C"],["#BC9CFF","#8BA4F9"],["#6FCF97","#66D2EA"],["#919191","#3D4975"]];let e=Math.PI/2;const n=Math.PI/90,r=2*Math.PI-n*this._data.filter(t=>0!==t).length,a=this._data.reduce((t,e)=>t+e,0),o=[];for(let i=0;i<this._data.length;i+=1)if(0!==this._data[i]){const u=e+this._data[i]/a*r;o.push({start:e,end:u,gradient:t[i]}),e=u+n}return o}_writeSummary(){const[t,e]=this._$element.find(".js-feedbacks-chart__summary").children(),n=this._data.reduce((t,e)=>t+e,0);t.innerText=n,e.innerText=r.a.selectWordByCount(n,["голосов","голос","голоса","голосов"],{})}static initDefault({selector:e=".js-feedbacks-chart",parent:n=document,data:r=[0,0,0,0]}){(new a).init({$element:t(n.querySelector(e)),data:r})}}e.a=a}).call(this,n("EVdn"))},bn27:function(t,e,n){}});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vd2VicGFjay9ib290c3RyYXAiLCJ3ZWJwYWNrOi8vLy4vc3JjL2tpdC9ibG9ja3MvZmVlZGJhY2tzLWNoYXJ0L2luZGV4LmpzIiwid2VicGFjazovLy8uL3NyYy9wYWdlcy9zaXRlL3Jvb20tZGV0YWlscy9yb29tLWRldGFpbHMuanMiLCJ3ZWJwYWNrOi8vLy4vc3JjL2tpdC9ibG9ja3MvZmVlZGJhY2tzLWNoYXJ0L0ZlZWRiYWNrc0NoYXJ0LmpzIl0sIm5hbWVzIjpbIndlYnBhY2tKc29ucENhbGxiYWNrIiwiZGF0YSIsIm1vZHVsZUlkIiwiY2h1bmtJZCIsImNodW5rSWRzIiwibW9yZU1vZHVsZXMiLCJleGVjdXRlTW9kdWxlcyIsImkiLCJyZXNvbHZlcyIsImxlbmd0aCIsIk9iamVjdCIsInByb3RvdHlwZSIsImhhc093blByb3BlcnR5IiwiY2FsbCIsImluc3RhbGxlZENodW5rcyIsInB1c2giLCJtb2R1bGVzIiwicGFyZW50SnNvbnBGdW5jdGlvbiIsInNoaWZ0IiwiZGVmZXJyZWRNb2R1bGVzIiwiYXBwbHkiLCJjaGVja0RlZmVycmVkTW9kdWxlcyIsInJlc3VsdCIsImRlZmVycmVkTW9kdWxlIiwiZnVsZmlsbGVkIiwiaiIsImRlcElkIiwic3BsaWNlIiwiX193ZWJwYWNrX3JlcXVpcmVfXyIsInMiLCJpbnN0YWxsZWRNb2R1bGVzIiwiMzAiLCJleHBvcnRzIiwibW9kdWxlIiwibCIsImUiLCJwcm9taXNlcyIsImluc3RhbGxlZENodW5rRGF0YSIsInByb21pc2UiLCJQcm9taXNlIiwicmVzb2x2ZSIsInJlamVjdCIsIm9uU2NyaXB0Q29tcGxldGUiLCJzY3JpcHQiLCJkb2N1bWVudCIsImNyZWF0ZUVsZW1lbnQiLCJjaGFyc2V0IiwidGltZW91dCIsIm5jIiwic2V0QXR0cmlidXRlIiwic3JjIiwicCIsImpzb25wU2NyaXB0U3JjIiwiZXJyb3IiLCJFcnJvciIsImV2ZW50Iiwib25lcnJvciIsIm9ubG9hZCIsImNsZWFyVGltZW91dCIsImNodW5rIiwiZXJyb3JUeXBlIiwidHlwZSIsInJlYWxTcmMiLCJ0YXJnZXQiLCJtZXNzYWdlIiwibmFtZSIsInJlcXVlc3QiLCJ1bmRlZmluZWQiLCJzZXRUaW1lb3V0IiwiaGVhZCIsImFwcGVuZENoaWxkIiwiYWxsIiwibSIsImMiLCJkIiwiZ2V0dGVyIiwibyIsImRlZmluZVByb3BlcnR5IiwiZW51bWVyYWJsZSIsImdldCIsInIiLCJTeW1ib2wiLCJ0b1N0cmluZ1RhZyIsInZhbHVlIiwidCIsIm1vZGUiLCJfX2VzTW9kdWxlIiwibnMiLCJjcmVhdGUiLCJrZXkiLCJiaW5kIiwibiIsIm9iamVjdCIsInByb3BlcnR5Iiwib2UiLCJlcnIiLCJjb25zb2xlIiwianNvbnBBcnJheSIsIndpbmRvdyIsIm9sZEpzb25wRnVuY3Rpb24iLCJzbGljZSIsImluaXREZWZhdWx0IiwiaW5pdEFsbCIsIkZlZWRiYWNrc0NoYXJ0IiwiJGVsZW1lbnQiLCJzY2FsZSIsInRoaXMiLCJfJGVsZW1lbnQiLCJfZGF0YSIsIl9idWlsZERvbnV0IiwiX3dyaXRlU3VtbWFyeSIsImNhbnZhcyIsImZpbmQiLCJjb250ZXh0IiwiZ2V0Q29udGV4dCIsInNpemUiLCJsaW5lV2lkdGgiLCJjZW50ZXIiLCJyYWRpdXMiLCJ3aWR0aCIsImhlaWdodCIsIl9jYWxjdWxhdGVSYWRpYW5Qb2ludHMiLCJmb3JFYWNoIiwiaXRlbSIsImdyYWRpZW50IiwiY3JlYXRlTGluZWFyR3JhZGllbnQiLCJhZGRDb2xvclN0b3AiLCJiZWdpblBhdGgiLCJhcmMiLCJzdGFydCIsImVuZCIsInN0cm9rZVN0eWxlIiwic3Ryb2tlIiwiZ3JhZGllbnRzIiwic3RhcnRQb2ludCIsIk1hdGgiLCJQSSIsImdhcFdpZHRoIiwiZnJlZVNwYWNlIiwiZmlsdGVyIiwic3VtIiwicmVkdWNlIiwiYSIsImIiLCJwb2ludHMiLCJlbmRQb2ludCIsImNvdW50Iiwidm9pY2UiLCJjaGlsZHJlbiIsInZvaWNlU3VtIiwiaW5uZXJUZXh0Iiwic2VsZWN0V29y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QUFTLEdBRWYsSUFBSyxJQUFJekksRUFBSSxFQUFHQSxFQUFJbUcsS0FBS0UsTUFBTW5HLE9BQVFGLEdBQUssRUFDMUMsR0FBc0IsSUFBbEJtRyxLQUFLRSxNQUFNckcsR0FBVSxDQUN2QixNQUFNMEksRUFBV1gsRUFBYzVCLEtBQUtFLE1BQU1yRyxHQUFLcUksRUFBT0YsRUFDdERNLEVBQU9qSSxLQUFLLENBQ1ZrSCxNQUFPSyxFQUNQSixJQUFLZSxFQUNMckIsU0FBVVMsRUFBVTlILEtBRXRCK0gsRUFBYVcsRUFBV1IsRUFHNUIsT0FBT08sRUFHVCxnQkFDRSxNQUFPRSxFQUFPQyxHQUFTekMsS0FBS0MsVUFBVUssS0FBSyxnQ0FBZ0NvQyxXQUNyRUMsRUFBVzNDLEtBQUtFLE1BQU1pQyxPQUFPLENBQUNDLEVBQUdDLElBQU1ELEVBQUlDLEVBQUcsR0FDcERHLEVBQU1JLFVBQVlELEVBQ2xCRixFQUFNRyxVQUFZLElBQWdCQyxrQkFDaENGLEVBQ0EsQ0FBQyxVQUFXLFFBQVMsU0FBVSxXQUMvQixJQUlKLG9CQUFtQixTQUFFRyxFQUFXLHNCQUFxQixPQUFFQyxFQUFTN0csU0FBUSxLQUFFM0MsRUFBTyxDQUFDLEVBQUcsRUFBRyxFQUFHLE1BQ3pGLElBQUlzRyxHQUFpQm1ELEtBQUssQ0FBRWxELFNBQVVtRCxFQUFFRixFQUFPRyxjQUFjSixJQUFZdkosVUFJOUQsUSIsImZpbGUiOiJyb29tLWRldGFpbHMuOTg2NzA5NjMwZjcyYzM5ZmZhYTEuanMiLCJzb3VyY2VzQ29udGVudCI6WyIgXHQvLyBpbnN0YWxsIGEgSlNPTlAgY2FsbGJhY2sgZm9yIGNodW5rIGxvYWRpbmdcbiBcdGZ1bmN0aW9uIHdlYnBhY2tKc29ucENhbGxiYWNrKGRhdGEpIHtcbiBcdFx0dmFyIGNodW5rSWRzID0gZGF0YVswXTtcbiBcdFx0dmFyIG1vcmVNb2R1bGVzID0gZGF0YVsxXTtcbiBcdFx0dmFyIGV4ZWN1dGVNb2R1bGVzID0gZGF0YVsyXTtcblxuIFx0XHQvLyBhZGQgXCJtb3JlTW9kdWxlc1wiIHRvIHRoZSBtb2R1bGVzIG9iamVjdCxcbiBcdFx0Ly8gdGhlbiBmbGFnIGFsbCBcImNodW5rSWRzXCIgYXMgbG9hZGVkIGFuZCBmaXJlIGNhbGxiYWNrXG4gXHRcdHZhciBtb2R1bGVJZCwgY2h1bmtJZCwgaSA9IDAsIHJlc29sdmVzID0gW107XG4gXHRcdGZvcig7aSA8IGNodW5rSWRzLmxlbmd0aDsgaSsrKSB7XG4gXHRcdFx0Y2h1bmtJZCA9IGNodW5rSWRzW2ldO1xuIFx0XHRcdGlmKE9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbChpbnN0YWxsZWRDaHVua3MsIGNodW5rSWQpICYmIGluc3RhbGxlZENodW5rc1tjaHVua0lkXSkge1xuIFx0XHRcdFx0cmVzb2x2ZXMucHVzaChpbnN0YWxsZWRDaHVua3NbY2h1bmtJZF1bMF0pO1xuIFx0XHRcdH1cbiBcdFx0XHRpbnN0YWxsZWRDaHVua3NbY2h1bmtJZF0gPSAwO1xuIFx0XHR9XG4gXHRcdGZvcihtb2R1bGVJZCBpbiBtb3JlTW9kdWxlcykge1xuIFx0XHRcdGlmKE9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbChtb3JlTW9kdWxlcywgbW9kdWxlSWQpKSB7XG4gXHRcdFx0XHRtb2R1bGVzW21vZHVsZUlkXSA9IG1vcmVNb2R1bGVzW21vZHVsZUlkXTtcbiBcdFx0XHR9XG4gXHRcdH1cbiBcdFx0aWYocGFyZW50SnNvbnBGdW5jdGlvbikgcGFyZW50SnNvbnBGdW5jdGlvbihkYXRhKTtcblxuIFx0XHR3aGlsZShyZXNvbHZlcy5sZW5ndGgpIHtcbiBcdFx0XHRyZXNvbHZlcy5zaGlmdCgpKCk7XG4gXHRcdH1cblxuIFx0XHQvLyBhZGQgZW50cnkgbW9kdWxlcyBmcm9tIGxvYWRlZCBjaHVuayB0byBkZWZlcnJlZCBsaXN0XG4gXHRcdGRlZmVycmVkTW9kdWxlcy5wdXNoLmFwcGx5KGRlZmVycmVkTW9kdWxlcywgZXhlY3V0ZU1vZHVsZXMgfHwgW10pO1xuXG4gXHRcdC8vIHJ1biBkZWZlcnJlZCBtb2R1bGVzIHdoZW4gYWxsIGNodW5rcyByZWFkeVxuIFx0XHRyZXR1cm4gY2hlY2tEZWZlcnJlZE1vZHVsZXMoKTtcbiBcdH07XG4gXHRmdW5jdGlvbiBjaGVja0RlZmVycmVkTW9kdWxlcygpIHtcbiBcdFx0dmFyIHJlc3VsdDtcbiBcdFx0Zm9yKHZhciBpID0gMDsgaSA8IGRlZmVycmVkTW9kdWxlcy5sZW5ndGg7IGkrKykge1xuIFx0XHRcdHZhciBkZWZlcnJlZE1vZHVsZSA9IGRlZmVycmVkTW9kdWxlc1tpXTtcbiBcdFx0XHR2YXIgZnVsZmlsbGVkID0gdHJ1ZTtcbiBcdFx0XHRmb3IodmFyIGogPSAxOyBqIDwgZGVmZXJyZWRNb2R1bGUubGVuZ3RoOyBqKyspIHtcbiBcdFx0XHRcdHZhciBkZXBJZCA9IGRlZmVycmVkTW9kdWxlW2pdO1xuIFx0XHRcdFx0aWYoaW5zdGFsbGVkQ2h1bmtzW2RlcElkXSAhPT0gMCkgZnVsZmlsbGVkID0gZmFsc2U7XG4gXHRcdFx0fVxuIFx0XHRcdGlmKGZ1bGZpbGxlZCkge1xuIFx0XHRcdFx0ZGVmZXJyZWRNb2R1bGVzLnNwbGljZShpLS0sIDEpO1xuIFx0XHRcdFx0cmVzdWx0ID0gX193ZWJwYWNrX3JlcXVpcmVfXyhfX3dlYnBhY2tfcmVxdWlyZV9fLnMgPSBkZWZlcnJlZE1vZHVsZVswXSk7XG4gXHRcdFx0fVxuIFx0XHR9XG5cbiBcdFx0cmV0dXJuIHJlc3VsdDtcbiBcdH1cblxuIFx0Ly8gVGhlIG1vZHVsZSBjYWNoZVxuIFx0dmFyIGluc3RhbGxlZE1vZHVsZXMgPSB7fTtcblxuIFx0Ly8gb2JqZWN0IHRvIHN0b3JlIGxvYWRlZCBhbmQgbG9hZGluZyBjaHVua3NcbiBcdC8vIHVuZGVmaW5lZCA9IGNodW5rIG5vdCBsb2FkZWQsIG51bGwgPSBjaHVuayBwcmVsb2FkZWQvcHJlZmV0Y2hlZFxuIFx0Ly8gUHJvbWlzZSA9IGNodW5rIGxvYWRpbmcsIDAgPSBjaHVuayBsb2FkZWRcbiBcdHZhciBpbnN0YWxsZWRDaHVua3MgPSB7XG4gXHRcdDMwOiAwXG4gXHR9O1xuXG4gXHR2YXIgZGVmZXJyZWRNb2R1bGVzID0gW107XG5cbiBcdC8vIHNjcmlwdCBwYXRoIGZ1bmN0aW9uXG4gXHRmdW5jdGlvbiBqc29ucFNjcmlwdFNyYyhjaHVua0lkKSB7XG4gXHRcdHJldHVybiBfX3dlYnBhY2tfcmVxdWlyZV9fLnAgKyBcIlwiICsgKHtcIjI3XCI6XCJucG0uYWlyLWRhdGVwaWNrZXJcIn1bY2h1bmtJZF18fGNodW5rSWQpICsgXCIuXCIgKyB7XCIyN1wiOlwiZDk3ZDZmNTRlODI3MzYyZjUyY2RcIn1bY2h1bmtJZF0gKyBcIi5qc1wiXG4gXHR9XG5cbiBcdC8vIFRoZSByZXF1aXJlIGZ1bmN0aW9uXG4gXHRmdW5jdGlvbiBfX3dlYnBhY2tfcmVxdWlyZV9fKG1vZHVsZUlkKSB7XG5cbiBcdFx0Ly8gQ2hlY2sgaWYgbW9kdWxlIGlzIGluIGNhY2hlXG4gXHRcdGlmKGluc3RhbGxlZE1vZHVsZXNbbW9kdWxlSWRdKSB7XG4gXHRcdFx0cmV0dXJuIGluc3RhbGxlZE1vZHVsZXNbbW9kdWxlSWRdLmV4cG9ydHM7XG4gXHRcdH1cbiBcdFx0Ly8gQ3JlYXRlIGEgbmV3IG1vZHVsZSAoYW5kIHB1dCBpdCBpbnRvIHRoZSBjYWNoZSlcbiBcdFx0dmFyIG1vZHVsZSA9IGluc3RhbGxlZE1vZHVsZXNbbW9kdWxlSWRdID0ge1xuIFx0XHRcdGk6IG1vZHVsZUlkLFxuIFx0XHRcdGw6IGZhbHNlLFxuIFx0XHRcdGV4cG9ydHM6IHt9XG4gXHRcdH07XG5cbiBcdFx0Ly8gRXhlY3V0ZSB0aGUgbW9kdWxlIGZ1bmN0aW9uXG4gXHRcdG1vZHVsZXNbbW9kdWxlSWRdLmNhbGwobW9kdWxlLmV4cG9ydHMsIG1vZHVsZSwgbW9kdWxlLmV4cG9ydHMsIF9fd2VicGFja19yZXF1aXJlX18pO1xuXG4gXHRcdC8vIEZsYWcgdGhlIG1vZHVsZSBhcyBsb2FkZWRcbiBcdFx0bW9kdWxlLmwgPSB0cnVlO1xuXG4gXHRcdC8vIFJldHVybiB0aGUgZXhwb3J0cyBvZiB0aGUgbW9kdWxlXG4gXHRcdHJldHVybiBtb2R1bGUuZXhwb3J0cztcbiBcdH1cblxuIFx0Ly8gVGhpcyBmaWxlIGNvbnRhaW5zIG9ubHkgdGhlIGVudHJ5IGNodW5rLlxuIFx0Ly8gVGhlIGNodW5rIGxvYWRpbmcgZnVuY3Rpb24gZm9yIGFkZGl0aW9uYWwgY2h1bmtzXG4gXHRfX3dlYnBhY2tfcmVxdWlyZV9fLmUgPSBmdW5jdGlvbiByZXF1aXJlRW5zdXJlKGNodW5rSWQpIHtcbiBcdFx0dmFyIHByb21pc2VzID0gW107XG5cblxuIFx0XHQvLyBKU09OUCBjaHVuayBsb2FkaW5nIGZvciBqYXZhc2NyaXB0XG5cbiBcdFx0dmFyIGluc3RhbGxlZENodW5rRGF0YSA9IGluc3RhbGxlZENodW5rc1tjaHVua0lkXTtcbiBcdFx0aWYoaW5zdGFsbGVkQ2h1bmtEYXRhICE9PSAwKSB7IC8vIDAgbWVhbnMgXCJhbHJlYWR5IGluc3RhbGxlZFwiLlxuXG4gXHRcdFx0Ly8gYSBQcm9taXNlIG1lYW5zIFwiY3VycmVudGx5IGxvYWRpbmdcIi5cbiBcdFx0XHRpZihpbnN0YWxsZWRDaHVua0RhdGEpIHtcbiBcdFx0XHRcdHByb21pc2VzLnB1c2goaW5zdGFsbGVkQ2h1bmtEYXRhWzJdKTtcbiBcdFx0XHR9IGVsc2Uge1xuIFx0XHRcdFx0Ly8gc2V0dXAgUHJvbWlzZSBpbiBjaHVuayBjYWNoZVxuIFx0XHRcdFx0dmFyIHByb21pc2UgPSBuZXcgUHJvbWlzZShmdW5jdGlvbihyZXNvbHZlLCByZWplY3QpIHtcbiBcdFx0XHRcdFx0aW5zdGFsbGVkQ2h1bmtEYXRhID0gaW5zdGFsbGVkQ2h1bmtzW2NodW5rSWRdID0gW3Jlc29sdmUsIHJlamVjdF07XG4gXHRcdFx0XHR9KTtcbiBcdFx0XHRcdHByb21pc2VzLnB1c2goaW5zdGFsbGVkQ2h1bmtEYXRhWzJdID0gcHJvbWlzZSk7XG5cbiBcdFx0XHRcdC8vIHN0YXJ0IGNodW5rIGxvYWRpbmdcbiBcdFx0XHRcdHZhciBzY3JpcHQgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdzY3JpcHQnKTtcbiBcdFx0XHRcdHZhciBvblNjcmlwdENvbXBsZXRlO1xuXG4gXHRcdFx0XHRzY3JpcHQuY2hhcnNldCA9ICd1dGYtOCc7XG4gXHRcdFx0XHRzY3JpcHQudGltZW91dCA9IDEyMDtcbiBcdFx0XHRcdGlmIChfX3dlYnBhY2tfcmVxdWlyZV9fLm5jKSB7XG4gXHRcdFx0XHRcdHNjcmlwdC5zZXRBdHRyaWJ1dGUoXCJub25jZVwiLCBfX3dlYnBhY2tfcmVxdWlyZV9fLm5jKTtcbiBcdFx0XHRcdH1cbiBcdFx0XHRcdHNjcmlwdC5zcmMgPSBqc29ucFNjcmlwdFNyYyhjaHVua0lkKTtcblxuIFx0XHRcdFx0Ly8gY3JlYXRlIGVycm9yIGJlZm9yZSBzdGFjayB1bndvdW5kIHRvIGdldCB1c2VmdWwgc3RhY2t0cmFjZSBsYXRlclxuIFx0XHRcdFx0dmFyIGVycm9yID0gbmV3IEVycm9yKCk7XG4gXHRcdFx0XHRvblNjcmlwdENvbXBsZXRlID0gZnVuY3Rpb24gKGV2ZW50KSB7XG4gXHRcdFx0XHRcdC8vIGF2b2lkIG1lbSBsZWFrcyBpbiBJRS5cbiBcdFx0XHRcdFx0c2NyaXB0Lm9uZXJyb3IgPSBzY3JpcHQub25sb2FkID0gbnVsbDtcbiBcdFx0XHRcdFx0Y2xlYXJUaW1lb3V0KHRpbWVvdXQpO1xuIFx0XHRcdFx0XHR2YXIgY2h1bmsgPSBpbnN0YWxsZWRDaHVua3NbY2h1bmtJZF07XG4gXHRcdFx0XHRcdGlmKGNodW5rICE9PSAwKSB7XG4gXHRcdFx0XHRcdFx0aWYoY2h1bmspIHtcbiBcdFx0XHRcdFx0XHRcdHZhciBlcnJvclR5cGUgPSBldmVudCAmJiAoZXZlbnQudHlwZSA9PT0gJ2xvYWQnID8gJ21pc3NpbmcnIDogZXZlbnQudHlwZSk7XG4gXHRcdFx0XHRcdFx0XHR2YXIgcmVhbFNyYyA9IGV2ZW50ICYmIGV2ZW50LnRhcmdldCAmJiBldmVudC50YXJnZXQuc3JjO1xuIFx0XHRcdFx0XHRcdFx0ZXJyb3IubWVzc2FnZSA9ICdMb2FkaW5nIGNodW5rICcgKyBjaHVua0lkICsgJyBmYWlsZWQuXFxuKCcgKyBlcnJvclR5cGUgKyAnOiAnICsgcmVhbFNyYyArICcpJztcbiBcdFx0XHRcdFx0XHRcdGVycm9yLm5hbWUgPSAnQ2h1bmtMb2FkRXJyb3InO1xuIFx0XHRcdFx0XHRcdFx0ZXJyb3IudHlwZSA9IGVycm9yVHlwZTtcbiBcdFx0XHRcdFx0XHRcdGVycm9yLnJlcXVlc3QgPSByZWFsU3JjO1xuIFx0XHRcdFx0XHRcdFx0Y2h1bmtbMV0oZXJyb3IpO1xuIFx0XHRcdFx0XHRcdH1cbiBcdFx0XHRcdFx0XHRpbnN0YWxsZWRDaHVua3NbY2h1bmtJZF0gPSB1bmRlZmluZWQ7XG4gXHRcdFx0XHRcdH1cbiBcdFx0XHRcdH07XG4gXHRcdFx0XHR2YXIgdGltZW91dCA9IHNldFRpbWVvdXQoZnVuY3Rpb24oKXtcbiBcdFx0XHRcdFx0b25TY3JpcHRDb21wbGV0ZSh7IHR5cGU6ICd0aW1lb3V0JywgdGFyZ2V0OiBzY3JpcHQgfSk7XG4gXHRcdFx0XHR9LCAxMjAwMDApO1xuIFx0XHRcdFx0c2NyaXB0Lm9uZXJyb3IgPSBzY3JpcHQub25sb2FkID0gb25TY3JpcHRDb21wbGV0ZTtcbiBcdFx0XHRcdGRvY3VtZW50LmhlYWQuYXBwZW5kQ2hpbGQoc2NyaXB0KTtcbiBcdFx0XHR9XG4gXHRcdH1cbiBcdFx0cmV0dXJuIFByb21pc2UuYWxsKHByb21pc2VzKTtcbiBcdH07XG5cbiBcdC8vIGV4cG9zZSB0aGUgbW9kdWxlcyBvYmplY3QgKF9fd2VicGFja19tb2R1bGVzX18pXG4gXHRfX3dlYnBhY2tfcmVxdWlyZV9fLm0gPSBtb2R1bGVzO1xuXG4gXHQvLyBleHBvc2UgdGhlIG1vZHVsZSBjYWNoZVxuIFx0X193ZWJwYWNrX3JlcXVpcmVfXy5jID0gaW5zdGFsbGVkTW9kdWxlcztcblxuIFx0Ly8gZGVmaW5lIGdldHRlciBmdW5jdGlvbiBmb3IgaGFybW9ueSBleHBvcnRzXG4gXHRfX3dlYnBhY2tfcmVxdWlyZV9fLmQgPSBmdW5jdGlvbihleHBvcnRzLCBuYW1lLCBnZXR0ZXIpIHtcbiBcdFx0aWYoIV9fd2VicGFja19yZXF1aXJlX18ubyhleHBvcnRzLCBuYW1lKSkge1xuIFx0XHRcdE9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBuYW1lLCB7IGVudW1lcmFibGU6IHRydWUsIGdldDogZ2V0dGVyIH0pO1xuIFx0XHR9XG4gXHR9O1xuXG4gXHQvLyBkZWZpbmUgX19lc01vZHVsZSBvbiBleHBvcnRzXG4gXHRfX3dlYnBhY2tfcmVxdWlyZV9fLnIgPSBmdW5jdGlvbihleHBvcnRzKSB7XG4gXHRcdGlmKHR5cGVvZiBTeW1ib2wgIT09ICd1bmRlZmluZWQnICYmIFN5bWJvbC50b1N0cmluZ1RhZykge1xuIFx0XHRcdE9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBTeW1ib2wudG9TdHJpbmdUYWcsIHsgdmFsdWU6ICdNb2R1bGUnIH0pO1xuIFx0XHR9XG4gXHRcdE9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCAnX19lc01vZHVsZScsIHsgdmFsdWU6IHRydWUgfSk7XG4gXHR9O1xuXG4gXHQvLyBjcmVhdGUgYSBmYWtlIG5hbWVzcGFjZSBvYmplY3RcbiBcdC8vIG1vZGUgJiAxOiB2YWx1ZSBpcyBhIG1vZHVsZSBpZCwgcmVxdWlyZSBpdFxuIFx0Ly8gbW9kZSAmIDI6IG1lcmdlIGFsbCBwcm9wZXJ0aWVzIG9mIHZhbHVlIGludG8gdGhlIG5zXG4gXHQvLyBtb2RlICYgNDogcmV0dXJuIHZhbHVlIHdoZW4gYWxyZWFkeSBucyBvYmplY3RcbiBcdC8vIG1vZGUgJiA4fDE6IGJlaGF2ZSBsaWtlIHJlcXVpcmVcbiBcdF9fd2VicGFja19yZXF1aXJlX18udCA9IGZ1bmN0aW9uKHZhbHVlLCBtb2RlKSB7XG4gXHRcdGlmKG1vZGUgJiAxKSB2YWx1ZSA9IF9fd2VicGFja19yZXF1aXJlX18odmFsdWUpO1xuIFx0XHRpZihtb2RlICYgOCkgcmV0dXJuIHZhbHVlO1xuIFx0XHRpZigobW9kZSAmIDQpICYmIHR5cGVvZiB2YWx1ZSA9PT0gJ29iamVjdCcgJiYgdmFsdWUgJiYgdmFsdWUuX19lc01vZHVsZSkgcmV0dXJuIHZhbHVlO1xuIFx0XHR2YXIgbnMgPSBPYmplY3QuY3JlYXRlKG51bGwpO1xuIFx0XHRfX3dlYnBhY2tfcmVxdWlyZV9fLnIobnMpO1xuIFx0XHRPYmplY3QuZGVmaW5lUHJvcGVydHkobnMsICdkZWZhdWx0JywgeyBlbnVtZXJhYmxlOiB0cnVlLCB2YWx1ZTogdmFsdWUgfSk7XG4gXHRcdGlmKG1vZGUgJiAyICYmIHR5cGVvZiB2YWx1ZSAhPSAnc3RyaW5nJykgZm9yKHZhciBrZXkgaW4gdmFsdWUpIF9fd2VicGFja19yZXF1aXJlX18uZChucywga2V5LCBmdW5jdGlvbihrZXkpIHsgcmV0dXJuIHZhbHVlW2tleV07IH0uYmluZChudWxsLCBrZXkpKTtcbiBcdFx0cmV0dXJuIG5zO1xuIFx0fTtcblxuIFx0Ly8gZ2V0RGVmYXVsdEV4cG9ydCBmdW5jdGlvbiBmb3IgY29tcGF0aWJpbGl0eSB3aXRoIG5vbi1oYXJtb255IG1vZHVsZXNcbiBcdF9fd2VicGFja19yZXF1aXJlX18ubiA9IGZ1bmN0aW9uKG1vZHVsZSkge1xuIFx0XHR2YXIgZ2V0dGVyID0gbW9kdWxlICYmIG1vZHVsZS5fX2VzTW9kdWxlID9cbiBcdFx0XHRmdW5jdGlvbiBnZXREZWZhdWx0KCkgeyByZXR1cm4gbW9kdWxlWydkZWZhdWx0J107IH0gOlxuIFx0XHRcdGZ1bmN0aW9uIGdldE1vZHVsZUV4cG9ydHMoKSB7IHJldHVybiBtb2R1bGU7IH07XG4gXHRcdF9fd2VicGFja19yZXF1aXJlX18uZChnZXR0ZXIsICdhJywgZ2V0dGVyKTtcbiBcdFx0cmV0dXJuIGdldHRlcjtcbiBcdH07XG5cbiBcdC8vIE9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbFxuIFx0X193ZWJwYWNrX3JlcXVpcmVfXy5vID0gZnVuY3Rpb24ob2JqZWN0LCBwcm9wZXJ0eSkgeyByZXR1cm4gT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eS5jYWxsKG9iamVjdCwgcHJvcGVydHkpOyB9O1xuXG4gXHQvLyBfX3dlYnBhY2tfcHVibGljX3BhdGhfX1xuIFx0X193ZWJwYWNrX3JlcXVpcmVfXy5wID0gXCJcIjtcblxuIFx0Ly8gb24gZXJyb3IgZnVuY3Rpb24gZm9yIGFzeW5jIGxvYWRpbmdcbiBcdF9fd2VicGFja19yZXF1aXJlX18ub2UgPSBmdW5jdGlvbihlcnIpIHsgY29uc29sZS5lcnJvcihlcnIpOyB0aHJvdyBlcnI7IH07XG5cbiBcdHZhciBqc29ucEFycmF5ID0gd2luZG93W1wid2VicGFja0pzb25wXCJdID0gd2luZG93W1wid2VicGFja0pzb25wXCJdIHx8IFtdO1xuIFx0dmFyIG9sZEpzb25wRnVuY3Rpb24gPSBqc29ucEFycmF5LnB1c2guYmluZChqc29ucEFycmF5KTtcbiBcdGpzb25wQXJyYXkucHVzaCA9IHdlYnBhY2tKc29ucENhbGxiYWNrO1xuIFx0anNvbnBBcnJheSA9IGpzb25wQXJyYXkuc2xpY2UoKTtcbiBcdGZvcih2YXIgaSA9IDA7IGkgPCBqc29ucEFycmF5Lmxlbmd0aDsgaSsrKSB3ZWJwYWNrSnNvbnBDYWxsYmFjayhqc29ucEFycmF5W2ldKTtcbiBcdHZhciBwYXJlbnRKc29ucEZ1bmN0aW9uID0gb2xkSnNvbnBGdW5jdGlvbjtcblxuXG4gXHQvLyBhZGQgZW50cnkgbW9kdWxlIHRvIGRlZmVycmVkIGxpc3RcbiBcdGRlZmVycmVkTW9kdWxlcy5wdXNoKFtcIi9mL2dcIiwyLDAsMSwzLDUsNCw4LDEyLDE4LDE2XSk7XG4gXHQvLyBydW4gZGVmZXJyZWQgbW9kdWxlcyB3aGVuIHJlYWR5XG4gXHRyZXR1cm4gY2hlY2tEZWZlcnJlZE1vZHVsZXMoKTtcbiIsImltcG9ydCAnLi9mZWVkYmFja3MtY2hhcnQuc2Nzcyc7XG5pbXBvcnQgRmVlZGJhY2tzQ2hhcnQgZnJvbSAnLi9GZWVkYmFja3NDaGFydCc7XG5cbmV4cG9ydCBkZWZhdWx0IEZlZWRiYWNrc0NoYXJ0O1xuIiwiaW1wb3J0ICdAYmxvY2tzL2J1bGxldC1saXN0JztcbmltcG9ydCAnQGJsb2Nrcy9pY29uZWQtbGlzdCc7XG5pbXBvcnQgQ2FsY3VsYXRvckNhcmQgZnJvbSAnQGJsb2Nrcy9jYWxjdWxhdG9yLWNhcmQnO1xuaW1wb3J0IEZlZWRiYWNrc0NoYXJ0IGZyb20gJ0BibG9ja3MvZmVlZGJhY2tzLWNoYXJ0JztcbmltcG9ydCBGZWVkYmFjayBmcm9tICdAYmxvY2tzL2ZlZWRiYWNrJztcbmltcG9ydCAnLi4vbGF5b3V0L2xheW91dCc7XG5pbXBvcnQgJy4vcm9vbS1kZXRhaWxzLnNjc3MnO1xuXG5GZWVkYmFja3NDaGFydC5pbml0RGVmYXVsdCh7IGRhdGE6IFsxMzAsIDY1LCA2NSwgMF0gfSk7XG5GZWVkYmFjay5pbml0QWxsKHt9KTtcbkNhbGN1bGF0b3JDYXJkLmluaXREZWZhdWx0KHt9KTtcbiIsImltcG9ydCBSdXNzaWFuTGFuZ1V0aWwgZnJvbSAnQHV0aWxzL1J1c3NpYW5MYW5nVXRpbCc7XG5cbmNsYXNzIEZlZWRiYWNrc0NoYXJ0IHtcbiAgaW5pdCh7ICRlbGVtZW50LCBkYXRhLCBzY2FsZSA9IDEgfSkge1xuICAgIGlmICgkZWxlbWVudC5sZW5ndGggIT09IDApIHtcbiAgICAgIHRoaXMuXyRlbGVtZW50ID0gJGVsZW1lbnQ7XG4gICAgICB0aGlzLl9kYXRhID0gW2RhdGFbMF0sIGRhdGFbMl0sIGRhdGFbMV0sIGRhdGFbM11dO1xuICAgICAgdGhpcy5fYnVpbGREb251dChzY2FsZSk7XG4gICAgICB0aGlzLl93cml0ZVN1bW1hcnkoKTtcbiAgICB9XG4gIH1cblxuICBfYnVpbGREb251dChzY2FsZSkge1xuICAgIGNvbnN0IGNhbnZhcyA9IHRoaXMuXyRlbGVtZW50LmZpbmQoJy5qcy1mZWVkYmFja3MtY2hhcnRfX2RvbnV0JylbMF07XG4gICAgY29uc3QgY29udGV4dCA9IGNhbnZhcy5nZXRDb250ZXh0KCcyZCcpO1xuXG4gICAgY29uc3Qgc2l6ZSA9IDEyMCAqIHNjYWxlO1xuICAgIGNvbnN0IGxpbmVXaWR0aCA9IDUgKiBzY2FsZTtcbiAgICBjb25zdCBjZW50ZXIgPSBzaXplIC8gMjtcbiAgICBjb25zdCByYWRpdXMgPSBjZW50ZXIgLSBsaW5lV2lkdGg7XG5cbiAgICBjYW52YXMud2lkdGggPSBzaXplO1xuICAgIGNhbnZhcy5oZWlnaHQgPSBzaXplO1xuXG4gICAgdGhpcy5fY2FsY3VsYXRlUmFkaWFuUG9pbnRzKHRoaXMuX2RhdGEpLmZvckVhY2goKGl0ZW0pID0+IHtcbiAgICAgIGNvbnN0IGdyYWRpZW50ID0gY29udGV4dC5jcmVhdGVMaW5lYXJHcmFkaWVudCgwLCAwLCAwLCBzaXplKTtcbiAgICAgIGdyYWRpZW50LmFkZENvbG9yU3RvcCgwLCBpdGVtLmdyYWRpZW50WzBdKTtcbiAgICAgIGdyYWRpZW50LmFkZENvbG9yU3RvcCgxLCBpdGVtLmdyYWRpZW50WzFdKTtcblxuICAgICAgY29udGV4dC5iZWdpblBhdGgoKTtcbiAgICAgIGNvbnRleHQuYXJjKGNlbnRlciwgY2VudGVyLCByYWRpdXMsIGl0ZW0uc3RhcnQsIGl0ZW0uZW5kLCBmYWxzZSk7XG4gICAgICBjb250ZXh0LmxpbmVXaWR0aCA9IGxpbmVXaWR0aDtcblxuICAgICAgY29udGV4dC5zdHJva2VTdHlsZSA9IGdyYWRpZW50O1xuICAgICAgY29udGV4dC5zdHJva2UoKTtcbiAgICB9KTtcbiAgfVxuXG4gIF9jYWxjdWxhdGVSYWRpYW5Qb2ludHMoKSB7XG4gICAgY29uc3QgZ3JhZGllbnRzID0gW1xuICAgICAgWycjRkZFMzlDJywgJyNGRkJBOUMnXSxcbiAgICAgIFsnI0JDOUNGRicsICcjOEJBNEY5J10sXG4gICAgICBbJyM2RkNGOTcnLCAnIzY2RDJFQSddLFxuICAgICAgWycjOTE5MTkxJywgJyMzRDQ5NzUnXSxcbiAgICBdO1xuICAgIGxldCBzdGFydFBvaW50ID0gTWF0aC5QSSAvIDI7XG4gICAgY29uc3QgZ2FwV2lkdGggPSBNYXRoLlBJIC8gOTA7XG4gICAgY29uc3QgZnJlZVNwYWNlID0gMiAqIE1hdGguUEkgLSBnYXBXaWR0aCAqIHRoaXMuX2RhdGEuZmlsdGVyKChzaXplKSA9PiBzaXplICE9PSAwKS5sZW5ndGg7XG4gICAgY29uc3Qgc3VtID0gdGhpcy5fZGF0YS5yZWR1Y2UoKGEsIGIpID0+IGEgKyBiLCAwKTtcbiAgICBjb25zdCBwb2ludHMgPSBbXTtcblxuICAgIGZvciAobGV0IGkgPSAwOyBpIDwgdGhpcy5fZGF0YS5sZW5ndGg7IGkgKz0gMSkge1xuICAgICAgaWYgKHRoaXMuX2RhdGFbaV0gIT09IDApIHtcbiAgICAgICAgY29uc3QgZW5kUG9pbnQgPSBzdGFydFBvaW50ICsgKHRoaXMuX2RhdGFbaV0gLyBzdW0pICogZnJlZVNwYWNlO1xuICAgICAgICBwb2ludHMucHVzaCh7XG4gICAgICAgICAgc3RhcnQ6IHN0YXJ0UG9pbnQsXG4gICAgICAgICAgZW5kOiBlbmRQb2ludCxcbiAgICAgICAgICBncmFkaWVudDogZ3JhZGllbnRzW2ldLFxuICAgICAgICB9KTtcbiAgICAgICAgc3RhcnRQb2ludCA9IGVuZFBvaW50ICsgZ2FwV2lkdGg7XG4gICAgICB9XG4gICAgfVxuICAgIHJldHVybiBwb2ludHM7XG4gIH1cblxuICBfd3JpdGVTdW1tYXJ5KCkge1xuICAgIGNvbnN0IFtjb3VudCwgdm9pY2VdID0gdGhpcy5fJGVsZW1lbnQuZmluZCgnLmpzLWZlZWRiYWNrcy1jaGFydF9fc3VtbWFyeScpLmNoaWxkcmVuKCk7XG4gICAgY29uc3Qgdm9pY2VTdW0gPSB0aGlzLl9kYXRhLnJlZHVjZSgoYSwgYikgPT4gYSArIGIsIDApO1xuICAgIGNvdW50LmlubmVyVGV4dCA9IHZvaWNlU3VtO1xuICAgIHZvaWNlLmlubmVyVGV4dCA9IFJ1c3NpYW5MYW5nVXRpbC5zZWxlY3RXb3JkQnlDb3VudChcbiAgICAgIHZvaWNlU3VtLFxuICAgICAgWyfQs9C+0LvQvtGB0L7QsicsICfQs9C+0LvQvtGBJywgJ9Cz0L7Qu9C+0YHQsCcsICfQs9C+0LvQvtGB0L7QsiddLFxuICAgICAge30sXG4gICAgKTtcbiAgfVxuXG4gIHN0YXRpYyBpbml0RGVmYXVsdCh7IHNlbGVjdG9yID0gJy5qcy1mZWVkYmFja3MtY2hhcnQnLCBwYXJlbnQgPSBkb2N1bWVudCwgZGF0YSA9IFswLCAwLCAwLCAwXSB9KSB7XG4gICAgbmV3IEZlZWRiYWNrc0NoYXJ0KCkuaW5pdCh7ICRlbGVtZW50OiAkKHBhcmVudC5xdWVyeVNlbGVjdG9yKHNlbGVjdG9yKSksIGRhdGEgfSk7XG4gIH1cbn1cblxuZXhwb3J0IGRlZmF1bHQgRmVlZGJhY2tzQ2hhcnQ7XG4iXSwic291cmNlUm9vdCI6IiJ9