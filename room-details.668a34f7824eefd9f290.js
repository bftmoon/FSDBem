!function(t){function e(e){for(var r,i,u=e[0],c=e[1],s=e[2],d=0,f=[];d<u.length;d++)i=u[d],Object.prototype.hasOwnProperty.call(a,i)&&a[i]&&f.push(a[i][0]),a[i]=0;for(r in c)Object.prototype.hasOwnProperty.call(c,r)&&(t[r]=c[r]);for(l&&l(e);f.length;)f.shift()();return o.push.apply(o,s||[]),n()}function n(){for(var t,e=0;e<o.length;e++){for(var n=o[e],r=!0,u=1;u<n.length;u++){var c=n[u];0!==a[c]&&(r=!1)}r&&(o.splice(e--,1),t=i(i.s=n[0]))}return t}var r={},a={31:0},o=[];function i(e){if(r[e])return r[e].exports;var n=r[e]={i:e,l:!1,exports:{}};return t[e].call(n.exports,n,n.exports,i),n.l=!0,n.exports}i.e=function(t){var e=[],n=a[t];if(0!==n)if(n)e.push(n[2]);else{var r=new Promise((function(e,r){n=a[t]=[e,r]}));e.push(n[2]=r);var o,u=document.createElement("script");u.charset="utf-8",u.timeout=120,i.nc&&u.setAttribute("nonce",i.nc),u.src=function(t){return i.p+""+({28:"npm.air-datepicker"}[t]||t)+"."+{28:"55e362e75d375d4ed369"}[t]+".js"}(t);var c=new Error;o=function(e){u.onerror=u.onload=null,clearTimeout(s);var n=a[t];if(0!==n){if(n){var r=e&&("load"===e.type?"missing":e.type),o=e&&e.target&&e.target.src;c.message="Loading chunk "+t+" failed.\n("+r+": "+o+")",c.name="ChunkLoadError",c.type=r,c.request=o,n[1](c)}a[t]=void 0}};var s=setTimeout((function(){o({type:"timeout",target:u})}),12e4);u.onerror=u.onload=o,document.head.appendChild(u)}return Promise.all(e)},i.m=t,i.c=r,i.d=function(t,e,n){i.o(t,e)||Object.defineProperty(t,e,{enumerable:!0,get:n})},i.r=function(t){"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(t,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(t,"__esModule",{value:!0})},i.t=function(t,e){if(1&e&&(t=i(t)),8&e)return t;if(4&e&&"object"==typeof t&&t&&t.__esModule)return t;var n=Object.create(null);if(i.r(n),Object.defineProperty(n,"default",{enumerable:!0,value:t}),2&e&&"string"!=typeof t)for(var r in t)i.d(n,r,function(e){return t[e]}.bind(null,r));return n},i.n=function(t){var e=t&&t.__esModule?function(){return t.default}:function(){return t};return i.d(e,"a",e),e},i.o=function(t,e){return Object.prototype.hasOwnProperty.call(t,e)},i.p="",i.oe=function(t){throw console.error(t),t};var u=window.webpackJsonp=window.webpackJsonp||[],c=u.push.bind(u);u.push=e,u=u.slice();for(var s=0;s<u.length;s++)e(u[s]);var l=c;o.push(["/f/g",2,0,1,3,5,4,8,9,13,19,17]),n()}({"/f/g":function(t,e,n){"use strict";n.r(e);n("BQPm"),n("mbwX");var r=n("jqRu"),a=(n("bn27"),n("SF9M").a),o=n("rMor");n("ECeb"),n("KG+G");a.initDefault({data:[130,65,65,0]}),o.a.initAll({}),r.a.initDefault({})},"KG+G":function(t,e,n){},SF9M:function(t,e,n){"use strict";(function(t){var r=n("1frD");class a{init({$element:t,data:e,scale:n=1}){0!==t.length&&(this._$element=t,this._data=[e[0],e[2],e[1],e[3]],this._buildDonut(n),this._writeSummary())}_buildDonut(t){const e=this._$element.find(".js-feedbacks-chart__donut")[0],n=e.getContext("2d"),r=120*t,a=5*t,o=r/2,i=o-a;e.width=r,e.height=r,this._calculateRadianPoints(this._data).forEach(t=>{const e=n.createLinearGradient(0,0,0,r);e.addColorStop(0,t.gradient[0]),e.addColorStop(1,t.gradient[1]),n.beginPath(),n.arc(o,o,i,t.start,t.end,!1),n.lineWidth=a,n.strokeStyle=e,n.stroke()})}_calculateRadianPoints(){const t=[["#FFE39C","#FFBA9C"],["#BC9CFF","#8BA4F9"],["#6FCF97","#66D2EA"],["#919191","#3D4975"]];let e=Math.PI/2;const n=Math.PI/90,r=2*Math.PI-n*this._data.filter(t=>0!==t).length,a=this._data.reduce((t,e)=>t+e,0),o=[];for(let i=0;i<this._data.length;i+=1)if(0!==this._data[i]){const u=e+this._data[i]/a*r;o.push({start:e,end:u,gradient:t[i]}),e=u+n}return o}_writeSummary(){const[t,e]=this._$element.find(".js-feedbacks-chart__summary").children(),n=this._data.reduce((t,e)=>t+e,0);t.innerText=n,e.innerText=r.a.selectWordByCount(n,["голосов","голос","голоса","голосов"],{})}static initDefault({selector:e=".js-feedbacks-chart",parent:n=document,data:r=[0,0,0,0]}){(new a).init({$element:t(n.querySelector(e)),data:r})}}e.a=a}).call(this,n("EVdn"))},bn27:function(t,e,n){}});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,