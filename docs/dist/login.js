!function(t){function e(e){for(var i,o,c=e[0],s=e[1],l=e[2],f=0,d=[];f<c.length;f++)o=c[f],Object.prototype.hasOwnProperty.call(a,o)&&a[o]&&d.push(a[o][0]),a[o]=0;for(i in s)Object.prototype.hasOwnProperty.call(s,i)&&(t[i]=s[i]);for(u&&u(e);d.length;)d.shift()();return r.push.apply(r,l||[]),n()}function n(){for(var t,e=0;e<r.length;e++){for(var n=r[e],i=!0,c=1;c<n.length;c++){var s=n[c];0!==a[s]&&(i=!1)}i&&(r.splice(e--,1),t=o(o.s=n[0]))}return t}var i={},a={9:0},r=[];function o(e){if(i[e])return i[e].exports;var n=i[e]={i:e,l:!1,exports:{}};return t[e].call(n.exports,n,n.exports,o),n.l=!0,n.exports}o.m=t,o.c=i,o.d=function(t,e,n){o.o(t,e)||Object.defineProperty(t,e,{enumerable:!0,get:n})},o.r=function(t){"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(t,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(t,"__esModule",{value:!0})},o.t=function(t,e){if(1&e&&(t=o(t)),8&e)return t;if(4&e&&"object"==typeof t&&t&&t.__esModule)return t;var n=Object.create(null);if(o.r(n),Object.defineProperty(n,"default",{enumerable:!0,value:t}),2&e&&"string"!=typeof t)for(var i in t)o.d(n,i,function(e){return t[e]}.bind(null,i));return n},o.n=function(t){var e=t&&t.__esModule?function(){return t.default}:function(){return t};return o.d(e,"a",e),e},o.o=function(t,e){return Object.prototype.hasOwnProperty.call(t,e)},o.p="";var c=window.webpackJsonp=window.webpackJsonp||[],s=c.push.bind(c);c.push=e,c=c.slice();for(var l=0;l<c.length;l++)e(c[l]);var u=s;r.push([106,0,2]),n()}({106:function(t,e,n){"use strict";n.r(e);n(107),n(37);(new(n(92).a)).create()},107:function(t,e,n){},24:function(t,e,n){"use strict";n(30)},27:function(t,e,n){"use strict";(function(t){n(42);class i{static init(t){t.mask("99.99.9999",{completed(){const t=Date.parse(this.val().split(".").reverse().join("-"));Number.isNaN(t)?this[0].setCustomValidity("Невозможная дата"):t>Date.now()?this[0].setCustomValidity("Слишком молоды"):t<Date.now()-47304e8?this[0].setCustomValidity("Невозможный жизненный срок"):this[0].setCustomValidity("")}})}static initAll({selector:e=".js-input_masked",parent:n=document}){t(n).find(e).each((e,n)=>i.init(t(n)))}static initDefault({selector:e=".js-input_masked",parent:n=document}){i.init(t(n.querySelector(e)))}}e.a=i}).call(this,n(0))},30:function(t,e,n){},37:function(t,e,n){"use strict";n(10),n(25);n(9).a.initDefault({})},41:function(t,e,n){},42:function(t,e,n){var i,a,r;a=[n(0)],void 0===(r="function"==typeof(i=function(t){var e,n=navigator.userAgent,i=/iphone/i.test(n),a=/chrome/i.test(n),r=/android/i.test(n);t.mask={definitions:{9:"[0-9]",a:"[A-Za-z]","*":"[A-Za-z0-9]"},autoclear:!0,dataName:"rawMaskFn",placeholder:"_"},t.fn.extend({caret:function(t,e){var n;if(0!==this.length&&!this.is(":hidden")&&this.get(0)===document.activeElement)return"number"==typeof t?(e="number"==typeof e?e:t,this.each((function(){this.setSelectionRange?this.setSelectionRange(t,e):this.createTextRange&&((n=this.createTextRange()).collapse(!0),n.moveEnd("character",e),n.moveStart("character",t),n.select())}))):(this[0].setSelectionRange?(t=this[0].selectionStart,e=this[0].selectionEnd):document.selection&&document.selection.createRange&&(n=document.selection.createRange(),t=0-n.duplicate().moveStart("character",-1e5),e=t+n.text.length),{begin:t,end:e})},unmask:function(){return this.trigger("unmask")},mask:function(n,o){var c,s,l,u,f,d,h;if(!n&&this.length>0){var g=t(this[0]).data(t.mask.dataName);return g?g():void 0}return o=t.extend({autoclear:t.mask.autoclear,placeholder:t.mask.placeholder,completed:null},o),c=t.mask.definitions,s=[],l=d=n.length,u=null,n=String(n),t.each(n.split(""),(function(t,e){"?"==e?(d--,l=t):c[e]?(s.push(new RegExp(c[e])),null===u&&(u=s.length-1),t<l&&(f=s.length-1)):s.push(null)})),this.trigger("unmask").each((function(){var g=t(this),p=t.map(n.split(""),(function(t,e){if("?"!=t)return c[t]?k(e):t})),m=p.join(""),v=g.val();function b(){if(o.completed){for(var t=u;t<=f;t++)if(s[t]&&p[t]===k(t))return;o.completed.call(g)}}function k(t){return t<o.placeholder.length?o.placeholder.charAt(t):o.placeholder.charAt(0)}function y(t){for(;++t<d&&!s[t];);return t}function C(t,e){var n,i;if(!(t<0)){for(n=t,i=y(e);n<d;n++)if(s[n]){if(!(i<d&&s[n].test(p[i])))break;p[n]=p[i],p[i]=k(i),i=y(i)}w(),g.caret(Math.max(u,t))}}function j(t){S(),g.val()!=v&&g.change()}function _(t,e){var n;for(n=t;n<e&&n<d;n++)s[n]&&(p[n]=k(n))}function w(){g.val(p.join(""))}function S(t){var e,n,i,a=g.val(),r=-1;for(e=0,i=0;e<d;e++)if(s[e]){for(p[e]=k(e);i++<a.length;)if(n=a.charAt(i-1),s[e].test(n)){p[e]=n,r=e;break}if(i>a.length){_(e+1,d);break}}else p[e]===a.charAt(i)&&i++,e<l&&(r=e);return t?w():r+1<l?o.autoclear||p.join("")===m?(g.val()&&g.val(""),_(0,d)):w():(w(),g.val(g.val().substring(0,r+1))),l?e:u}g.data(t.mask.dataName,(function(){return t.map(p,(function(t,e){return s[e]&&t!=k(e)?t:null})).join("")})),g.one("unmask",(function(){g.off(".mask").removeData(t.mask.dataName)})).on("focus.mask",(function(){var t;g.prop("readonly")||(clearTimeout(e),v=g.val(),t=S(),e=setTimeout((function(){g.get(0)===document.activeElement&&(w(),t==n.replace("?","").length?g.caret(0,t):g.caret(t))}),10))})).on("blur.mask",j).on("keydown.mask",(function(t){if(!g.prop("readonly")){var e,n,a,r=t.which||t.keyCode;h=g.val(),8===r||46===r||i&&127===r?(n=(e=g.caret()).begin,(a=e.end)-n==0&&(n=46!==r?function(t){for(;--t>=0&&!s[t];);return t}(n):a=y(n-1),a=46===r?y(a):a),_(n,a),C(n,a-1),t.preventDefault()):13===r?j.call(this,t):27===r&&(g.val(v),g.caret(0,S()),t.preventDefault())}})).on("keypress.mask",(function(e){if(!g.prop("readonly")){var n,i,a,o=e.which||e.keyCode,c=g.caret();e.ctrlKey||e.altKey||e.metaKey||o<32||!o||13===o||(c.end-c.begin!=0&&(_(c.begin,c.end),C(c.begin,c.end-1)),(n=y(c.begin-1))<d&&(i=String.fromCharCode(o),s[n].test(i))&&(function(t){var e,n,i,a;for(e=t,n=k(t);e<d;e++)if(s[e]){if(i=y(e),a=p[e],p[e]=n,!(i<d&&s[i].test(a)))break;n=a}}(n),p[n]=i,w(),a=y(n),r?setTimeout((function(){t.proxy(t.fn.caret,g,a)()}),0):g.caret(a),c.begin<=f&&b()),e.preventDefault())}})).on("input.mask paste.mask",(function(){g.prop("readonly")||setTimeout((function(){var t=S(!0);g.caret(t),b()}),0)})),a&&r&&g.off("input.mask").on("input.mask",(function(t){var e=g.val(),n=g.caret();if(h&&h.length&&h.length>e.length){for(S(!0);n.begin>0&&!s[n.begin-1];)n.begin--;if(0===n.begin)for(;n.begin<u&&!s[n.begin];)n.begin++;g.caret(n.begin,n.begin)}else{S(!0);var i=e.charAt(n.begin);n.begin<d&&(s[n.begin]||n.begin++,s[n.begin].test(i)&&n.begin++),g.caret(n.begin,n.begin)}b()})),S()}))}})})?i.apply(e,a):i)||(t.exports=r)},43:function(t,e,n){"use strict";n(24),n(44)},44:function(t,e,n){},45:function(t,e,n){"use strict";n(46)},46:function(t,e,n){},51:function(t,e,n){"use strict";n(8),n(3),n(72);var i=n(52);e.a=i.a},52:function(t,e,n){"use strict";(function(t){class n{static init(t,e){t.find(".js-login-card__registration-button").on("click",e)}static initDefault({selector:e=".js-login-card",parent:i=document,registrationClickListener:a}){n.init(t(i).find(e),a)}}e.a=n}).call(this,n(0))},67:function(t,e,n){"use strict";var i=n(8);n(43),n(45),n(3),n(70);var a=class{static initDefault({selector:t=".js-registration-card",parent:e=document,loginClickListener:n}){const a=e.querySelector(t);a.querySelector(".js-registration-card__login-button").addEventListener("click",n),i.a.initDefault({parent:a})}};e.a=a},70:function(t,e,n){},72:function(t,e,n){},8:function(t,e,n){"use strict";n(41);var i=n(27);e.a=i.a},92:function(t,e,n){"use strict";(function(t){var i=n(51),a=n(67);e.a=class{create(){this.$cards=t(".js-login-page__card"),this.handleLoginButtonClick=this.handleLoginButtonClick.bind(this),this.handleRegistrationButtonClick=this.handleRegistrationButtonClick.bind(this),i.a.initDefault({registrationClickListener:this.handleRegistrationButtonClick}),a.a.initDefault({loginClickListener:this.handleLoginButtonClick})}handleLoginButtonClick(){this.toggleCards()}handleRegistrationButtonClick(){this.toggleCards()}toggleCards(){this.$cards.toggleClass("login-page__card_hidden")}}}).call(this,n(0))}});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,